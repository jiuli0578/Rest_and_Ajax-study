传统的服务器的结构是基于MVC模式的
    Model -- 数据模型
    View -- 视图，用来呈现
    Controller -- 控制器，负责加载数据并选择视图来呈现数据
        -传统的服务器是直接为客户端返回一个页面
            所以并不适用于现在的场景

目前的应用场景，一个应用通常会有多个客户端（client）存在，例如：
    web端       移动端（app）       pc端
    -如果一个服务器直接返回html页面，那么它只能为web端提供服务
        其它类型的客户端还要单独开发服务器，这样就提高了开发和维护的成本

如何解决这个问题？
    -传统的服务器需要做两件事：一、加载数据，二、将模型渲染进视图
    -解决方案就是将渲染视图的功能从服务器中剥离出来
        服务器只负责向客户端提供数据，渲染视图的工作由客户端自行完成
    -分离之后，服务器只提供数据，一个服务器就可以为多种客户端提供服务
        同时将渲染视图的工作交给客户端后，简化了服务器的代码的编写

Rest
    -REpresentational State Transfer
        表示层状态的传输
    -Rest实际上就是一种服务器的设计风格
        它的主要特点就是服务器只返回数据
    -服务器和客户端传输数据时通常使用JSON作为数据格式
    -请求的方法：   
        GET     加载数据
        POST    新建或添加数据
        PUT     添加或修改数据
        PATCH   修改数据
        DELETE  删除数据
        OPTION  由浏览器自动发送，检查请求的一些权限
    -API（接口） Endpoint（端点）
        GET/user            //尽量统一路径
        POST/user
        DELETE/user/：id    //通过id来删除user数据
        ...

postman
    -这是一个软件，通过它可以帮助我们向服务器发送各种请求
        帮助我们测试API